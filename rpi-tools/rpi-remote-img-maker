#!/bin/bash
# This script download boot and root fs from a remote Raspberry Pi and create a local image file
#
# you can use it like this :
#     rpi-remote-img-maker RPI_ADDRESS
#
# example for Raspberry at address 192.168.0.70 and image file write as out.img (gzip it if all is ok):
#     sudo rpi-remote-img-maker 192.168.0.70

# exit if error occur
set -e

# vars
NAME=$(basename $0)

# flags
FORCE=0
GZIP=0

# parse optionals args
while getopts 'fgh' OPTION
do
    case $OPTION in
    f)
        FORCE=1
        ;;
    g)
        GZIP=1
        ;;
    h)
        printf "Usage: %s: [-h] [-f] RPI_ADDRESS\n" $NAME
        printf "\n"
        printf "  -h    print this help message\n"
        printf "  -g    gzip img file\n"
        printf "  -f    write img file even if file already exist\n"
        exit 0
        ;;
    esac
done
shift $(($OPTIND - 1))

# parse fixed args
RPI_ADDRESS=$1

# temp directory
TMP_DIR=$(mktemp -d)

# some checks
[ $EUID -ne 0 ] && { printf "ERROR: $NAME needs to be run by root\n" 1>&2; exit 1; }
[ $# -ne 1 ] && { printf "ERROR: $NAME needs 1 arg\n" 1>&2; exit 1; }


# downloads
printf "INFO: download boot and root dir to %s from pi@%s\n" $TMP_DIR $RPI_ADDRESS
rsync -ax --numeric-ids --rsync-path='sudo rsync' pi@$RPI_ADDRESS:/boot :/ $TMP_DIR

# extract hostname of rpi
RPI_HOSTNAME=$(cat $TMP_DIR/etc/hostname | tr -d '[:space:]')

# image file auto-build name
TODAY=$(date +%Y%m%d)
IMG_FILE=$RPI_HOSTNAME-$TODAY.img

# check if image file exist
if [ -f $IMG_FILE ] && [ $FORCE -ne 1 ]
then
    read -p "WARN: image file $IMG_FILE already exist, confirm overwrite ? (y/n)" -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        exit 1
    fi
fi

# create img file
printf "INFO: call rpi-img-maker (build %s image)\n" $IMG_FILE
rpi-img-maker -f $TMP_DIR/boot $TMP_DIR/ $IMG_FILE

# remove temp dirs
printf "INFO: remove temp dir %s\n" $TMP_DIR
rm -R $TMP_DIR

# gzip
if [ $GZIP -eq 1 ]
then
    printf "INFO: gzip %s\n" $IMG_FILE
    gzip $IMG_FILE
fi

# end
exit 0
